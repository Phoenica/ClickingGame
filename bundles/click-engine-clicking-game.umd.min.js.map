{"version":3,"sources":["ng://@click-engine/clicking-game/project-lib.ts","ng://@click-engine/clicking-game/components/clicking-game/types.ts","ng://@click-engine/clicking-game/components/clicking-game/clicking-game.component.ts","ng://@click-engine/clicking-game/clicking-game.module.ts"],"names":["defaultGameBoardConfiguration","canvasWidth","canvasHeight","groundFriction","gravityStrength","Ball","x","y","radius","dx","dy","bounciness","this","prototype","draw","canvas","beginPath","arc","Math","PI","fill","stroke","ClickingGameComponent","ngAfterViewInit","config","__assign","gameBoardConfiguration","nativeElement","width","height","updateRender","onClick","$event","newBall","random","balls","__spread","calculateGravityEffect","_this","forEach","ball","calculateMotion","resolveWallCollisions","maxWidth","maxHeight","friction","canvasContext","getContext","clearRect","requestAnimationFrame","bind","Component","args","selector","template","Input","ViewChild","ClickingGameModule","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import { ClickingGameConfiguration } from './types';\r\n\r\n\r\nexport const defaultGameBoardConfiguration: ClickingGameConfiguration = {\r\n  canvasWidth: 300,\r\n  canvasHeight: 300,\r\n  groundFriction: 0.005,\r\n  gravityStrength: 0.1\r\n};\r\n","export class Ball {\r\n  x: number;\r\n  y: number;\r\n  dx: number;\r\n  dy: number;\r\n  radius: number;\r\n  bounciness: number;\r\n\r\n  constructor(x: number, y: number, radius: number, dx = 0, dy = 0, bounciness = 0.8) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.radius = radius;\r\n    this.dx = dx;\r\n    this.dy = dy;\r\n    this.bounciness = bounciness;\r\n  }\r\n\r\n  draw(canvas: CanvasRenderingContext2D) {\r\n    canvas.beginPath();\r\n    canvas.arc(this.x, this.y, this.radius, 0, 2 * Math.PI);\r\n    canvas.fill();\r\n    canvas.stroke();\r\n  }\r\n}\r\n","import { AfterViewInit, Component, ElementRef, Input, ViewChild } from '@angular/core';\r\nimport { defaultGameBoardConfiguration } from '../../project-lib';\r\nimport { ClickingGameConfiguration } from '../../types';\r\nimport { Ball } from './types';\r\n\r\n@Component({\r\n  selector: 'ce-clicking-game',\r\n  templateUrl: './clicking-game.component.html',\r\n  styleUrls: ['./clicking-game.component.scss']\r\n})\r\nexport class ClickingGameComponent implements AfterViewInit {\r\n  @Input() gameBoardConfiguration: ClickingGameConfiguration;\r\n\r\n  @ViewChild('gameBoard') canvas: ElementRef<HTMLCanvasElement>;\r\n\r\n  balls: Ball[] = [];\r\n  config: ClickingGameConfiguration;\r\n\r\n  ngAfterViewInit(): void {\r\n    if (!this.canvas) {\r\n      return;\r\n    }\r\n\r\n    this.config = {...defaultGameBoardConfiguration, ...this.gameBoardConfiguration};\r\n\r\n    this.canvas.nativeElement.width = this.config.canvasWidth;\r\n    this.canvas.nativeElement.height = this.config.canvasHeight;\r\n\r\n    this.updateRender();\r\n  }\r\n\r\n  onClick($event: MouseEvent) {\r\n    const newBall = new Ball(\r\n        $event.x,\r\n        $event.y,\r\n        5,\r\n        16 * (Math.random() - 0.5),\r\n        -8 * (Math.random()),\r\n        (Math.random() * 5.9 + 4) / 10);\r\n\r\n    this.balls = [...this.balls, newBall];\r\n  }\r\n\r\n  calculateGravityEffect(balls: Ball[]) {\r\n    balls.forEach(ball => {\r\n      ball.dy += this.config.gravityStrength;\r\n    });\r\n  }\r\n\r\n  calculateMotion(balls: Ball[]) {\r\n    balls.forEach(ball => {\r\n      ball.x += ball.dx;\r\n      ball.y += ball.dy;\r\n    });\r\n  }\r\n\r\n  resolveWallCollisions(balls: Ball[]) {\r\n    const maxWidth = this.config.canvasWidth;\r\n    const maxHeight = this.config.canvasHeight;\r\n    const friction = this.config.groundFriction;\r\n\r\n    balls.forEach(ball => {\r\n      ball.x = (ball.x - ball.radius < 0) ? ball.radius : ball.x;\r\n      ball.x = (ball.x + ball.radius > maxWidth) ? maxWidth - ball.radius : ball.x;\r\n      ball.y = (ball.y - ball.radius < 0) ? ball.radius : ball.y;\r\n      ball.y = (ball.y + ball.radius > maxHeight) ? maxHeight - ball.radius : ball.y;\r\n\r\n      ball.dy = (ball.y === ball.radius || ball.y === maxHeight - ball.radius) ? -ball.bounciness * ball.dy : ball.dy;\r\n      ball.dx = (ball.x === ball.radius || ball.x === maxWidth - ball.radius) ? -ball.bounciness * ball.dx : ball.dx;\r\n\r\n      ball.dx = (ball.y === maxHeight - ball.radius) ? ball.dx * (1 - friction) : ball.dx;\r\n    });\r\n  }\r\n\r\n  updateRender() {\r\n    const canvasContext = this.canvas.nativeElement.getContext('2d');\r\n\r\n    canvasContext.clearRect(0, 0, this.config.canvasWidth, this.config.canvasHeight);\r\n    this.calculateGravityEffect(this.balls);\r\n    this.calculateMotion(this.balls);\r\n    this.resolveWallCollisions(this.balls);\r\n\r\n    this.balls.forEach(ball => ball.draw(canvasContext));\r\n\r\n    requestAnimationFrame(this.updateRender.bind(this));\r\n  }\r\n}\r\n\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { ClickingGameComponent } from './components/clicking-game/clicking-game.component';\r\n\r\n@NgModule({\r\n  declarations: [ClickingGameComponent],\r\n  exports: [ClickingGameComponent]\r\n})\r\nexport class ClickingGameModule { }\r\n\r\nexport { ClickingGameComponent };\r\n"]}